name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'  # Use 3.11 for better CI compatibility

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
    
    - name: Download NLTK data
      run: |
        python -c "
        import nltk
        try:
            nltk.download('punkt', quiet=True)
            nltk.download('wordnet', quiet=True) 
            nltk.download('stopwords', quiet=True)
            print('NLTK data downloaded successfully')
        except Exception as e:
            print(f'NLTK download error: {e}')
        "
    
    - name: Create required directories
      run: |
        mkdir -p models/{current,training,backup}
        mkdir -p data/{raw,processed}
        mkdir -p logs
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test basic imports
      run: |
        python -c "
        try:
            import pandas as pd
            import numpy as np
            import sklearn
            from app.utils import preprocess_text
            result = preprocess_text('test message')
            print('✅ All imports and basic functionality working')
        except Exception as e:
            print(f'❌ Import test failed: {e}')
            exit(1)
        "

  build:
    name: 🏗️ Build Application
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build application (syntax check)
      run: |
        python -m py_compile app/main.py
        python -m py_compile app/utils.py
        echo "✅ Application syntax check passed"
    
    - name: Create deployment summary
      run: |
        echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Build successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
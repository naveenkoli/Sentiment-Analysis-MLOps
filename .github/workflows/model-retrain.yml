name: 🤖 Automated Model Retraining

on:
  # Trigger on new data files
  push:
    paths:
      - 'data/raw/**'
      - '**.xlsx'
      - '**.csv'
  
  # Scheduled retraining every 10 days at 2 AM UTC
  schedule:
    - cron: '0 2 */10 * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_retrain:
        description: 'Force retraining even without new data'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.13'

jobs:
  check-data:
    name: 📊 Check for New Data
    runs-on: ubuntu-latest
    outputs:
      should-retrain: ${{ steps.check.outputs.retrain }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for new data or forced retrain
      id: check
      run: |
        if [ "${{ github.event.inputs.force_retrain }}" == "true" ]; then
          echo "🔄 Force retrain requested"
          echo "retrain=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "schedule" ]; then
          echo "⏰ Scheduled retrain triggered"
          echo "retrain=true" >> $GITHUB_OUTPUT
        elif git diff --name-only HEAD~1 HEAD | grep -E "(data/raw/.*\.(xlsx|csv)|.*\.(xlsx|csv))"; then
          echo "📊 New data files detected"
          echo "retrain=true" >> $GITHUB_OUTPUT
        else
          echo "ℹ️ No new data files found"
          echo "retrain=false" >> $GITHUB_OUTPUT
        fi

  retrain-model:
    name: 🤖 Retrain Model
    runs-on: ubuntu-latest
    needs: check-data
    if: needs.check-data.outputs.should-retrain == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "import nltk; nltk.download('wordnet', quiet=True); nltk.download('stopwords', quiet=True); nltk.download('punkt', quiet=True)"
    
    - name: Create directories
      run: |
        mkdir -p models/{current,training,backup} data/{raw,processed} logs
    
    - name: Setup existing models (if first run)
      run: |
        if [ ! -f "models/current/metadata.json" ] && [ -f "models/tfidf_vectorizer.pkl" ]; then
          echo "📋 Setting up existing models..."
          cp models/*.pkl models/current/ 2>/dev/null || true
          echo '{
            "timestamp": "'$(date +'%Y%m%d_%H%M%S')'",
            "accuracy": 0.85,
            "model_type": "logistic_regression",
            "source": "existing_models"
          }' > models/current/metadata.json
        fi
    
    - name: Train new model
      id: train
      run: |
        echo "🤖 Starting model training..."
        python scripts/train_model.py
        
        # Get the latest training directory
        LATEST_MODEL=$(ls -t models/training | head -1)
        echo "model-dir=models/training/$LATEST_MODEL" >> $GITHUB_OUTPUT
        
        # Read accuracy from metadata
        ACCURACY=$(python -c "import json; print(json.load(open('models/training/$LATEST_MODEL/metadata.json'))['accuracy'])")
        echo "accuracy=$ACCURACY" >> $GITHUB_OUTPUT
    
    - name: Validate model performance
      run: |
        echo "🧪 Validating model performance..."
        ACCURACY="${{ steps.train.outputs.accuracy }}"
        MIN_ACCURACY=0.70
        
        if (( $(echo "$ACCURACY >= $MIN_ACCURACY" | bc -l) )); then
          echo "✅ Model validation passed (Accuracy: $ACCURACY)"
        else
          echo "❌ Model validation failed (Accuracy: $ACCURACY < $MIN_ACCURACY)"
          exit 1
        fi
    
    - name: Deploy new model
      run: |
        echo "🚀 Deploying new model..."
        python scripts/deploy_model.py "${{ steps.train.outputs.model-dir }}"
    
    - name: Commit updated models
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Actions Bot"
        git add models/current/ models/backup/
        
        if ! git diff --staged --quiet; then
          git commit -m "🤖 Auto-update models (Accuracy: ${{ steps.train.outputs.accuracy }})"
          git push
        else
          echo "No changes to commit"
        fi
    
    - name: Create deployment summary
      run: |
        echo "## 🤖 Model Retraining Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Model Directory**: ${{ steps.train.outputs.model-dir }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Accuracy**: ${{ steps.train.outputs.accuracy }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📧 Send Notification
    runs-on: ubuntu-latest
    needs: [check-data, retrain-model]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.retrain-model.result }}" == "success" ]; then
          echo "🎉 Model retraining completed successfully!"
          echo "📊 New model deployed with accuracy: ${{ needs.retrain-model.outputs.accuracy }}"
        elif [ "${{ needs.check-data.outputs.should-retrain }}" == "false" ]; then
          echo "ℹ️ No retraining needed - no new data detected"
        else
          echo "❌ Model retraining failed"
        fi